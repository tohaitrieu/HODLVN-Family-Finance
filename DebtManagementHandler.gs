/**
 * ===============================================
 * DEBT MANAGEMENT HANDLER v3.3.2 - FINAL FIX
 * ===============================================
 * 
 * CHANGELOG v3.3.2:
 * - Fix l·ªói m·∫•t c√¥ng th·ª©c c·ªôt J khi insert d·ªØ li·ªáu
 * - Chia insert th√†nh 2 ph·∫ßn: A-I v√† K-L, b·ªè qua c·ªôt J
 */

/**
 * Th√™m kho·∫£n n·ª£ m·ªõi v√†o sheet QU·∫¢N L√ù N·ª¢
 * @param {Object} data - D·ªØ li·ªáu kho·∫£n n·ª£
 * @returns {Object} {success: boolean, message: string}
 */
function addDebtManagement(data) {
  try {
    // Validation
    if (!data.date || !data.debtName || !data.principal || !data.interestRate || !data.term) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc!'
      };
    }
    
    // Parse d·ªØ li·ªáu
    const date = new Date(data.date);
    const debtName = data.debtName.trim();
    const debtType = data.debtType || 'Kh√°c';
    const principal = parseFloat(data.principal);
    const interestRate = parseFloat(data.interestRate);
    const term = parseInt(data.term);
    const note = data.note || '';
    
    // Validate s·ªë li·ªáu
    if (isNaN(principal) || principal <= 0) {
      return {
        success: false,
        message: '‚ùå S·ªë ti·ªÅn g·ªëc kh√¥ng h·ª£p l·ªá!'
      };
    }
    
    if (isNaN(interestRate) || interestRate < 0) {
      return {
        success: false,
        message: '‚ùå L√£i su·∫•t kh√¥ng h·ª£p l·ªá!'
      };
    }
    
    if (isNaN(term) || term <= 0) {
      return {
        success: false,
        message: '‚ùå K·ª≥ h·∫°n kh√¥ng h·ª£p l·ªá!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // ============================================
    // B∆Ø·ªöC 1: TH√äM V√ÄO SHEET QU·∫¢N L√ù N·ª¢
    // ============================================
    const debtSheet = ss.getSheetByName('QU·∫¢N L√ù N·ª¢');
    
    if (!debtSheet) {
      return {
        success: false,
        message: '‚ùå Kh√¥ng t√¨m th·∫•y sheet QU·∫¢N L√ù N·ª¢. Vui l√≤ng kh·ªüi t·∫°o sheet tr∆∞·ªõc!'
      };
    }
    
    // T√≠nh to√°n
    const maturityDate = new Date(date);
    maturityDate.setMonth(maturityDate.getMonth() + term);
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow() thay v√¨ getLastRow()
    // C·ªôt 2 (B) = T√™n kho·∫£n n·ª£ - c·ªôt d·ªØ li·ªáu th·ª±c
    const emptyRow = findEmptyRow(debtSheet, 2);
    const stt = getNextSTT(debtSheet, 2);
    
    Logger.log('QU·∫¢N L√ù N·ª¢ - D√≤ng tr·ªëng t√¨m ƒë∆∞·ª£c: ' + emptyRow);
    Logger.log('QU·∫¢N L√ù N·ª¢ - STT: ' + stt);
    
    // ============================================
    // CRITICAL FIX v3.3.2: Chia l√†m 2 ph·∫ßn ƒë·ªÉ KH√îNG ghi ƒë√® c√¥ng th·ª©c c·ªôt J
    // ============================================
    
    // Ph·∫ßn 1: C·ªôt A-I (STT ƒë·∫øn ƒê√£ tr·∫£ l√£i) - 9 c·ªôt
    const rowDataPart1 = [
      stt,                    // A: STT
      debtName,               // B: T√™n kho·∫£n n·ª£
      principal,              // C: G·ªëc
      interestRate / 100,     // D: L√£i su·∫•t (chuy·ªÉn % sang decimal)
      term,                   // E: K·ª≥ h·∫°n
      date,                   // F: Ng√†y vay
      maturityDate,           // G: ƒê√°o h·∫°n
      0,                      // H: ƒê√£ tr·∫£ g·ªëc
      0                       // I: ƒê√£ tr·∫£ l√£i
    ];
    
    // Ph·∫ßn 2: C·ªôt K-L (Tr·∫°ng th√°i v√† Ghi ch√∫) - 2 c·ªôt
    const rowDataPart2 = [
      'Ch∆∞a tr·∫£',             // K: Tr·∫°ng th√°i
      note                    // L: Ghi ch√∫
    ];
    
    // ‚úÖ Insert Ph·∫ßn 1: C·ªôt A-I (9 c·ªôt)
    debtSheet.getRange(emptyRow, 1, 1, rowDataPart1.length).setValues([rowDataPart1]);
    
    // ‚úÖ B·ªé QUA c·ªôt J (c·ªôt 10) - GI·ªÆ NGUY√äN C√îNG TH·ª®C =C-H
    
    // ‚úÖ Insert Ph·∫ßn 2: C·ªôt K-L (2 c·ªôt, b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 11)
    debtSheet.getRange(emptyRow, 11, 1, rowDataPart2.length).setValues([rowDataPart2]);
    
    Logger.log('‚úÖ ƒê√É INSERT XONG! C√¥ng th·ª©c c·ªôt J ƒë∆∞·ª£c gi·ªØ nguy√™n.');
    
    // Format
    formatNewRow(debtSheet, emptyRow, {
      3: '#,##0',           // G·ªëc
      4: '0.00"%"',         // L√£i su·∫•t
      6: 'dd/mm/yyyy',      // Ng√†y vay
      7: 'dd/mm/yyyy',      // ƒê√°o h·∫°n
      8: '#,##0',           // ƒê√£ tr·∫£ g·ªëc
      9: '#,##0',           // ƒê√£ tr·∫£ l√£i
      10: '#,##0'           // C√≤n n·ª£ (c√¥ng th·ª©c ƒë√£ c√≥ s·∫µn)
    });
    
    // ============================================
    // B∆Ø·ªöC 2: T·ª∞ ƒê·ªòNG TH√äM KHO·∫¢N THU
    // ============================================
    let autoIncomeMessage = '';
    
    const incomeSheet = ss.getSheetByName('THU');
    
    if (!incomeSheet) {
      autoIncomeMessage = '\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sheet THU. Kh√¥ng th·ªÉ t·ª± ƒë·ªông th√™m kho·∫£n thu!';
      Logger.log('ERROR: Kh√¥ng t√¨m th·∫•y sheet THU');
    } else {
      // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow() thay v√¨ getLastRow()
      // C·ªôt 2 (B) = Ng√†y - c·ªôt d·ªØ li·ªáu th·ª±c
      const incomeEmptyRow = findEmptyRow(incomeSheet, 2);
      const incomeStt = getNextSTT(incomeSheet, 2);
      
      Logger.log('THU - D√≤ng tr·ªëng t√¨m ƒë∆∞·ª£c: ' + incomeEmptyRow);
      Logger.log('THU - STT: ' + incomeStt);
      
      // X√°c ƒë·ªãnh ngu·ªìn thu d·ª±a v√†o lo·∫°i n·ª£
      let incomeSource = 'Vay ' + debtType;
      
      // Th√™m d·ªØ li·ªáu v√†o sheet THU
      // Columns: STT | Ng√†y | S·ªë ti·ªÅn | Ngu·ªìn thu | Ghi ch√∫
      const incomeRowData = [
        incomeStt,
        date,
        principal,
        incomeSource,
        `Vay: ${debtName}`
      ];
      
      incomeSheet.getRange(incomeEmptyRow, 1, 1, incomeRowData.length).setValues([incomeRowData]);
      
      // Format
      formatNewRow(incomeSheet, incomeEmptyRow, {
        2: 'dd/mm/yyyy',
        3: '#,##0'
      });
      
      autoIncomeMessage = `\n‚úÖ ƒê√£ T·ª∞ ƒê·ªòNG th√™m kho·∫£n thu "${incomeSource}" v√†o sheet THU`;
      Logger.log('SUCCESS: ƒê√£ th√™m kho·∫£n thu v√†o sheet THU t·∫°i d√≤ng ' + incomeEmptyRow);
    }
    
    // ============================================
    // B∆Ø·ªöC 3: TR·∫¢ V·ªÄ K·∫æT QU·∫¢
    // ============================================
    const resultMessage = `‚úÖ ƒê√£ th√™m kho·∫£n n·ª£: ${debtName}\n` +
               `üí∞ S·ªë ti·ªÅn: ${principal.toLocaleString('vi-VN')} VNƒê\n` +
               `üìÖ K·ª≥ h·∫°n: ${term} th√°ng\n` +
               `üí≥ Lo·∫°i: ${debtType}\n` +
               `üìä Tr·∫°ng th√°i: Ch∆∞a tr·∫£` +
               autoIncomeMessage;
    
    Logger.log('=== K·∫æT QU·∫¢ ===');
    Logger.log(resultMessage);
    
    return {
      success: true,
      message: resultMessage
    };
    
  } catch (error) {
    Logger.log('ERROR in addDebtManagement: ' + error.message);
    Logger.log('Stack trace: ' + error.stack);
    return {
      success: false,
      message: '‚ùå L·ªói: ' + error.message
    };
  }
}

/**
 * ============================================
 * FUNCTION TEST
 * ============================================
 */
function testAddDebtManagement() {
  const testData = {
    date: '2025-10-29',
    debtName: 'Test Margin SSI',
    debtType: 'Margin ch·ª©ng kho√°n',
    principal: 25000000,
    interestRate: 9.5,
    term: 3,
    note: 'Test v·ªõi findEmptyRow() v√† gi·ªØ c√¥ng th·ª©c c·ªôt J'
  };
  
  Logger.log('=== B·∫ÆT ƒê·∫¶U TEST ===');
  const result = addDebtManagement(testData);
  Logger.log('Result: ' + JSON.stringify(result));
  
  if (result.success) {
    SpreadsheetApp.getUi().alert('Test th√†nh c√¥ng!', result.message, SpreadsheetApp.getUi().ButtonSet.OK);
  } else {
    SpreadsheetApp.getUi().alert('Test th·∫•t b·∫°i!', result.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * ============================================
 * FUNCTION TEST - Ki·ªÉm tra c√¥ng th·ª©c c·ªôt J
 * ============================================
 */
function testFormulaColumnJ() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName('QU·∫¢N L√ù N·ª¢');
  
  if (!sheet) {
    Logger.log('ERROR: Kh√¥ng t√¨m th·∫•y sheet QU·∫¢N L√ù N·ª¢');
    return;
  }
  
  // T√¨m d√≤ng d·ªØ li·ªáu cu·ªëi c√πng
  const emptyRow = findEmptyRow(sheet, 2);
  const lastDataRow = emptyRow - 1;
  
  if (lastDataRow < 2) {
    Logger.log('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ test');
    return;
  }
  
  Logger.log('=== KI·ªÇM TRA C√îNG TH·ª®C C·ªòT J ===');
  
  for (let row = 2; row <= lastDataRow; row++) {
    const cellJ = sheet.getRange(row, 10); // C·ªôt J
    const formula = cellJ.getFormula();
    const value = cellJ.getValue();
    
    Logger.log(`D√≤ng ${row}:`);
    Logger.log(`  - C√¥ng th·ª©c: ${formula || '(kh√¥ng c√≥)'}`);
    Logger.log(`  - Gi√° tr·ªã: ${value}`);
    
    if (!formula) {
      Logger.log(`  ‚ö†Ô∏è C·∫¢NH B√ÅO: D√≤ng ${row} kh√¥ng c√≥ c√¥ng th·ª©c!`);
    } else {
      Logger.log(`  ‚úÖ OK`);
    }
  }
}