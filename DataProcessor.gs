/**
 * ===============================================
 * DATAPROCESSORS.GS v3.5.1 - COMPLETE FIX + NEW DIVIDEND LOGIC
 * ===============================================
 * 
 * CHANGELOG v3.5.1:
 * ‚úÖ FIX: addStockTransaction() - Ghi ƒë√∫ng 16 c·ªôt theo c·∫•u tr√∫c m·ªõi
 * ‚úÖ FIX: processDividend() - C·∫≠p nh·∫≠t C·ªòT I (C·ªï t·ª©c TM) thay v√¨ gi·∫£m c·ªôt H
 * ‚úÖ LOGIC: C·ªï t·ª©c ti·ªÅn m·∫∑t C·ªòNG D·ªíN v√†o c·ªôt I, c·ªôt K t·ª± ƒë·ªông t√≠nh gi√° ƒëi·ªÅu ch·ªânh
 * ‚úÖ LOGIC: Th√™m l·ªãch s·ª≠ c·ªï t·ª©c v√†o c·ªôt P (Ghi ch√∫)
 * ‚úÖ FIX: getStocksForDividend() - ƒê·ªçc ƒë√∫ng c·ªôt I (C·ªï t·ª©c TM) v√† t√≠nh gi√° ƒëi·ªÅu ch·ªânh
 * 
 * CHANGELOG v3.5:
 * ‚úÖ FIX: processDividend() - ƒêI·ªÄU CH·ªàNH GI√Å C·ªî PHI·∫æU khi nh·∫≠n c·ªï t·ª©c ti·ªÅn m·∫∑t
 * ‚úÖ LOGIC: C·ªï t·ª©c ti·ªÅn m·∫∑t gi·∫£m gi√° v·ªën tr·ª±c ti·∫øp cho T·∫§T C·∫¢ giao d·ªãch mua
 * ‚úÖ LOGIC: Th∆∞·ªüng c·ªï phi·∫øu tƒÉng s·ªë l∆∞·ª£ng, gi·ªØ nguy√™n t·ªïng gi√° v·ªën
 * 
 * CHANGELOG v3.4:
 * ‚úÖ FIX: addGold() - S·ª≠a l·ªói validation v√† ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß
 * ‚úÖ FIX: addOtherInvestment() - S·ª≠a l·ªói nh·∫≠n tham s·ªë investmentType
 * ‚úÖ NEW: getStocksForDividend() - L·∫•y danh s√°ch c·ªï phi·∫øu ƒë·ªÉ nh·∫≠n c·ªï t·ª©c
 * ‚úÖ NEW: processDividend() - X·ª≠ l√Ω c·ªï t·ª©c ti·ªÅn m·∫∑t v√† th∆∞·ªüng c·ªï phi·∫øu
 */

// ==================== H√ÄM H·ªñ TR·ª¢ - DEBT LIST ====================

/**
 * L·∫•y danh s√°ch c√°c kho·∫£n n·ª£ ƒëang c√≥
 * @return {Array} M·∫£ng t√™n c√°c kho·∫£n n·ª£
 */
function getDebtList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_MANAGEMENT);
    
    if (!sheet) {
      Logger.log('Sheet QU·∫¢N L√ù N·ª¢ kh√¥ng t·ªìn t·∫°i');
      return [];
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const dataRows = emptyRow - 2;
    
    if (dataRows <= 0) {
      return [];
    }
    
    const data = sheet.getRange(2, 2, dataRows, 1).getValues();
    
    const debtList = data
      .map(row => row[0])
      .filter(name => name && name.toString().trim() !== '');
    
    Logger.log('Danh s√°ch n·ª£: ' + debtList.join(', '));
    return debtList;
    
  } catch (error) {
    Logger.log('L·ªói getDebtList: ' + error.message);
    return [];
  }
}

// ==================== THU NH·∫¨P ====================

/**
 * Th√™m kho·∫£n thu nh·∫≠p
 * @param {Object} data - {date, amount, source, note}
 * @return {Object} {success, message}
 */
function addIncome(data) {
  try {
    if (!data.date || !data.amount || !data.source) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.INCOME);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet THU ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o! Vui l√≤ng kh·ªüi t·∫°o sheet tr∆∞·ªõc.'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const amount = parseFloat(data.amount);
    const source = data.source.toString();
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      amount,
      source,
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      3: '#,##0" VNƒê"'
    });
    
    Logger.log(`ƒê√£ th√™m thu nh·∫≠p: ${formatCurrency(amount)} - ${source}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n thu nh·∫≠p ${formatCurrency(amount)} t·ª´ ${source}!`
    };
    
  } catch (error) {
    Logger.log('Error in addIncome: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== CHI TI√äU ====================

/**
 * Th√™m kho·∫£n chi ti√™u
 * @param {Object} data - {date, amount, category, subcategory, note}
 * @return {Object} {success, message}
 */
function addExpense(data) {
  try {
    if (!data.date || !data.amount || !data.category) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.EXPENSE);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet CHI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const amount = parseFloat(data.amount);
    const category = data.category.toString();
    const subcategory = data.subcategory || '';
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      amount,
      category,
      subcategory,
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      3: '#,##0" VNƒê"'
    });
    
    BudgetManager.updateBudgetSpent(category);
    
    Logger.log(`ƒê√£ th√™m chi ti√™u: ${formatCurrency(amount)} - ${category}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n chi ti√™u ${formatCurrency(amount)} cho ${category}!`
    };
    
  } catch (error) {
    Logger.log('Error in addExpense: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== QU·∫¢N L√ù N·ª¢ ====================

/**
 * Th√™m kho·∫£n n·ª£
 * @param {Object} data - {loanDate, debtName, amount, interestRate, term, purpose, note}
 * @return {Object} {success, message}
 */
function addDebt(data) {
  try {
    if (!data.loanDate || !data.debtName || !data.amount) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_MANAGEMENT);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet QU·∫¢N L√ù N·ª¢ ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const loanDate = new Date(data.loanDate);
    const debtName = data.debtName.toString();
    const amount = parseFloat(data.amount);
    const interestRate = parseFloat(data.interestRate) || 0;
    const term = parseInt(data.term) || 12;
    const purpose = data.purpose || '';
    const note = data.note || '';
    
    const dueDate = new Date(loanDate);
    dueDate.setMonth(dueDate.getMonth() + term);
    
    const rowData = [
      stt,
      debtName,
      loanDate,
      amount,
      amount,
      interestRate / 100,
      term,
      dueDate,
      purpose,
      'Ch∆∞a tr·∫£',
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      3: 'dd/mm/yyyy',
      4: '#,##0" VNƒê"',
      5: '#,##0" VNƒê"',
      6: '0.00%',
      8: 'dd/mm/yyyy'
    });
    
    const incomeResult = addIncome({
      date: loanDate,
      amount: amount,
      source: 'Vay n·ª£',
      note: `Vay ${debtName}. ${note}`
    });
    
    if (!incomeResult.success) {
      Logger.log('C·∫£nh b√°o: Kh√¥ng th·ªÉ t·∫°o kho·∫£n thu t·ª± ƒë·ªông cho n·ª£');
    }
    
    Logger.log(`ƒê√£ th√™m kho·∫£n n·ª£: ${debtName} - ${formatCurrency(amount)}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n kho·∫£n n·ª£ ${debtName}: ${formatCurrency(amount)}!\n` +
               `üìÖ H·∫°n thanh to√°n: ${formatDate(dueDate)}`
    };
    
  } catch (error) {
    Logger.log('Error in addDebt: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

/**
 * Tr·∫£ n·ª£
 * @param {Object} data - {date, debtName, principalAmount, interestAmount, note}
 * @return {Object} {success, message}
 */
function payDebt(data) {
  try {
    if (!data.date || !data.debtName || !data.principalAmount) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const paymentSheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_PAYMENT);
    const debtSheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_MANAGEMENT);
    
    if (!paymentSheet || !debtSheet) {
      return {
        success: false,
        message: '‚ùå C√°c sheet li√™n quan ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(paymentSheet, 2);
    const stt = getNextSTT(paymentSheet, 2);
    
    const date = new Date(data.date);
    const debtName = data.debtName.toString();
    const principalAmount = parseFloat(data.principalAmount);
    const interestAmount = parseFloat(data.interestAmount) || 0;
    const totalAmount = principalAmount + interestAmount;
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      debtName,
      principalAmount,
      interestAmount,
      totalAmount,
      note
    ];
    
    paymentSheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(paymentSheet, emptyRow, {
      2: 'dd/mm/yyyy',
      4: '#,##0" VNƒê"',
      5: '#,##0" VNƒê"',
      6: '#,##0" VNƒê"'
    });
    
    const debtEmptyRow = findEmptyRow(debtSheet, 2);
    const debtDataRows = debtEmptyRow - 2;
    
    if (debtDataRows > 0) {
      const debtData = debtSheet.getRange(2, 2, debtDataRows, 10).getValues();
      
      for (let i = 0; i < debtData.length; i++) {
        const rowDebtName = debtData[i][0];
        
        if (rowDebtName === debtName) {
          const currentBalance = parseFloat(debtData[i][3]) || 0;
          const newBalance = currentBalance - principalAmount;
          const row = i + 2;
          
          debtSheet.getRange(row, 5).setValue(newBalance);
          
          if (newBalance <= 0) {
            debtSheet.getRange(row, 10).setValue('ƒê√£ thanh to√°n');
          }
          
          break;
        }
      }
    }
    
    BudgetManager.updateDebtBudget();
    
    Logger.log(`ƒê√£ tr·∫£ n·ª£: ${debtName} - G·ªëc: ${formatCurrency(principalAmount)}, L√£i: ${formatCurrency(interestAmount)}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n tr·∫£ n·ª£ ${debtName}!\n` +
               `üí∞ G·ªëc: ${formatCurrency(principalAmount)}\n` +
               `üìä L√£i: ${formatCurrency(interestAmount)}\n` +
               `üíµ T·ªïng: ${formatCurrency(totalAmount)}`
    };
    
  } catch (error) {
    Logger.log('Error in payDebt: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== CH·ª®NG KHO√ÅN ====================

/**
 * Th√™m giao d·ªãch ch·ª©ng kho√°n
 * @param {Object} data - {date, type, stockCode, quantity, price, fee, useMargin, marginAmount, marginRate, note}
 * @return {Object} {success, message}
 */
function addStock(data) {
  try {
    // ‚úÖ v3.5.1: S·ª≠a validation + h·ªó tr·ª£ c·∫£ symbol v√† stockCode
    Logger.log('addStock received data: ' + JSON.stringify(data));
    
    // H·ªó tr·ª£ c·∫£ 2 t√™n parameter: symbol (t·ª´ form) v√† stockCode (t·ª´ code c≈©)
    const stockCode = data.stockCode || data.symbol;
    
    if (!data.date) {
      Logger.log('Missing date');
      return { success: false, message: '‚ùå Thi·∫øu ng√†y giao d·ªãch!' };
    }
    if (!data.type) {
      Logger.log('Missing type');
      return { success: false, message: '‚ùå Thi·∫øu lo·∫°i giao d·ªãch!' };
    }
    if (!stockCode) {
      Logger.log('Missing stockCode/symbol');
      return { success: false, message: '‚ùå Thi·∫øu m√£ c·ªï phi·∫øu!' };
    }
    if (!data.quantity) {
      Logger.log('Missing quantity');
      return { success: false, message: '‚ùå Thi·∫øu s·ªë l∆∞·ª£ng!' };
    }
    if (data.price === undefined || data.price === null || data.price === '') {
      Logger.log('Missing price');
      return { success: false, message: '‚ùå Thi·∫øu gi√°!' };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.STOCK);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet CH·ª®NG KHO√ÅN ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const type = data.type.toString();
    // ‚úÖ D√πng bi·∫øn stockCode ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü tr√™n (h·ªó tr·ª£ c·∫£ symbol v√† stockCode)
    const stockCodeUpper = stockCode.toString().toUpperCase();
    const quantity = parseInt(data.quantity);
    const price = parseFloat(data.price);
    const fee = parseFloat(data.fee) || 0;
    const total = (quantity * price) + fee;
    const note = data.note || '';
    
    // ‚úÖ v3.5.1: Ghi ƒë√∫ng 16 c·ªôt - KH√îNG GHI ƒê√à c√¥ng th·ª©c
    // Ch·ªâ ghi d·ªØ li·ªáu v√†o c·ªôt A-J v√† P, b·ªè qua K-O (ƒë·ªÉ c√¥ng th·ª©c t·ª± ƒë·ªông)
    const rowData = [
      stt,           // A: STT
      date,          // B: Ng√†y
      type,          // C: Lo·∫°i GD
      stockCodeUpper,     // D: M√£ CK
      quantity,      // E: S·ªë l∆∞·ª£ng
      price,         // F: Gi√° g·ªëc
      fee,           // G: Ph√≠
      total,         // H: T·ªïng v·ªën
      0,             // I: C·ªï t·ª©c TM (kh·ªüi t·∫°o = 0)
      0              // J: C·ªï t·ª©c CP (kh·ªüi t·∫°o = 0)
    ];
    
    // Ghi d·ªØ li·ªáu v√†o c·ªôt A-J (10 c·ªôt ƒë·∫ßu)
    sheet.getRange(emptyRow, 1, 1, 10).setValues([rowData]);
    
    // Ghi ghi ch√∫ v√†o c·ªôt P (c·ªôt 16)
    sheet.getRange(emptyRow, 16).setValue(note);
    
    // ‚úÖ SET C√îNG TH·ª®C cho c·ªôt K-O
    // K: Gi√° ƒëi·ªÅu ch·ªânh = (T·ªïng v·ªën - C·ªï t·ª©c TM) / S·ªë l∆∞·ª£ng
    sheet.getRange(emptyRow, 11).setFormula(`=IF(E${emptyRow}>0, (H${emptyRow}-I${emptyRow})/E${emptyRow}, 0)`);
    
    // M: Gi√° tr·ªã HT = S·ªë l∆∞·ª£ng √ó Gi√° HT
    sheet.getRange(emptyRow, 13).setFormula(`=IF(AND(E${emptyRow}>0, L${emptyRow}>0), E${emptyRow}*L${emptyRow}, 0)`);
    
    // N: L√£i/L·ªó = Gi√° tr·ªã HT - (T·ªïng v·ªën - C·ªï t·ª©c TM)
    sheet.getRange(emptyRow, 14).setFormula(`=IF(M${emptyRow}>0, M${emptyRow}-(H${emptyRow}-I${emptyRow}), 0)`);
    
    // O: % L/L = L√£i/L·ªó / (T·ªïng v·ªën - C·ªï t·ª©c TM)
    sheet.getRange(emptyRow, 15).setFormula(`=IF(AND(N${emptyRow}<>0, (H${emptyRow}-I${emptyRow})>0), N${emptyRow}/(H${emptyRow}-I${emptyRow}), 0)`);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      6: '#,##0" VNƒê"',
      7: '#,##0" VNƒê"',
      8: '#,##0" VNƒê"',
      9: '#,##0" VNƒê"',
      11: '#,##0" VNƒê"',
      12: '#,##0" VNƒê"',
      13: '#,##0" VNƒê"',
      14: '#,##0" VNƒê"',
      15: '0.00%'
    });
    
    if (data.useMargin && data.marginAmount > 0) {
      const marginDebt = {
        loanDate: date,
        debtName: `Margin ${stockCodeUpper}`,
        amount: parseFloat(data.marginAmount),
        interestRate: parseFloat(data.marginRate) || 8.5,
        term: 3,
        purpose: `Vay margin mua ${stockCodeUpper}`,
        note: 'T·ª± ƒë·ªông t·ª´ giao d·ªãch ch·ª©ng kho√°n'
      };
      
      addDebt(marginDebt);
    }
    
    BudgetManager.updateInvestmentBudget('Ch·ª©ng kho√°n', total);
    
    Logger.log(`ƒê√£ th√™m giao d·ªãch CK: ${type} ${quantity} ${stockCodeUpper} @ ${formatCurrency(price)}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} CP ${stockCodeUpper}!\n` +
               `üí∞ Gi√°: ${formatCurrency(price)}/CP\n` +
               `üíµ T·ªïng: ${formatCurrency(total)}`
    };
    
  } catch (error) {
    Logger.log('Error in addStock: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== V√ÄNG ====================

/**
 * Th√™m giao d·ªãch v√†ng
 * @param {Object} data - {date, type, goldType, unit, quantity, price, note}
 * @return {Object} {success, message}
 */
function addGold(data) {
  try {
    if (!data.date || !data.type || !data.goldType || !data.quantity || !data.price) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.GOLD);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet V√ÄNG ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const type = data.type.toString();
    const goldType = data.goldType.toString();
    const unit = data.unit || 'L∆∞·ª£ng';
    const quantity = parseFloat(data.quantity);
    const price = parseFloat(data.price);
    const total = quantity * price;
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      type,
      goldType,
      unit,
      quantity,
      price,
      total,
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      7: '#,##0" VNƒê"',
      8: '#,##0" VNƒê"'
    });
    
    BudgetManager.updateInvestmentBudget('V√†ng', total);
    
    Logger.log(`ƒê√£ th√™m giao d·ªãch v√†ng: ${type} ${quantity} ${unit} ${goldType}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} ${unit} ${goldType}!\n` +
               `üí∞ Gi√°: ${formatCurrency(price)}/${unit}\n` +
               `üíµ T·ªïng: ${formatCurrency(total)}`
    };
    
  } catch (error) {
    Logger.log('Error in addGold: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== CRYPTO ====================

/**
 * Th√™m giao d·ªãch crypto
 * @param {Object} data - {date, type, coin, quantity, price, fee, note}
 * @return {Object} {success, message}
 */
function addCrypto(data) {
  try {
    if (!data.date || !data.type || !data.coin || !data.quantity || !data.price) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.CRYPTO);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet CRYPTO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const type = data.type.toString();
    const coin = data.coin.toString().toUpperCase();
    const quantity = parseFloat(data.quantity);
    const price = parseFloat(data.price);
    const fee = parseFloat(data.fee) || 0;
    const total = (quantity * price) + fee;
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      type,
      coin,
      quantity,
      price,
      fee,
      total,
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      6: '#,##0" VNƒê"',
      7: '#,##0" VNƒê"',
      8: '#,##0" VNƒê"'
    });
    
    BudgetManager.updateInvestmentBudget('Crypto', total);
    
    Logger.log(`ƒê√£ th√™m giao d·ªãch crypto: ${type} ${quantity} ${coin}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} ${coin}!\n` +
               `üí∞ Gi√°: ${formatCurrency(price)}/${coin}\n` +
               `üíµ T·ªïng: ${formatCurrency(total)}`
    };
    
  } catch (error) {
    Logger.log('Error in addCrypto: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== ƒê·∫¶U T∆Ø KH√ÅC ====================

/**
 * Th√™m giao d·ªãch ƒë·∫ßu t∆∞ kh√°c
 * @param {Object} data - {date, investmentType, amount, note}
 * @return {Object} {success, message}
 */
function addOtherInvestment(data) {
  try {
    if (!data.date || !data.investmentType || !data.amount) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.OTHER_INVESTMENT);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet ƒê·∫¶U T∆Ø KH√ÅC ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const date = new Date(data.date);
    const investmentType = data.investmentType.toString();
    const amount = parseFloat(data.amount);
    const note = data.note || '';
    
    const rowData = [
      stt,
      date,
      investmentType,
      amount,
      note
    ];
    
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      4: '#,##0" VNƒê"'
    });
    
    BudgetManager.updateInvestmentBudget('ƒê·∫ßu t∆∞ kh√°c', amount);
    
    Logger.log(`ƒê√£ th√™m ƒë·∫ßu t∆∞ kh√°c: ${investmentType} - ${formatCurrency(amount)}`);
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ƒë·∫ßu t∆∞ ${investmentType} v·ªõi s·ªë ti·ªÅn ${formatCurrency(amount)}!`
    };
    
  } catch (error) {
    Logger.log('Error in addOtherInvestment: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== C·ªî T·ª®C - v3.4/v3.5 FEATURE ====================

/**
 * L·∫•y danh s√°ch c·ªï phi·∫øu ƒëang n·∫Øm gi·ªØ ƒë·ªÉ nh·∫≠n c·ªï t·ª©c
 * ‚úÖ v3.5: C·∫≠p nh·∫≠t ƒë·ªçc t·ª´ c·ªôt I (C·ªï t·ª©c TM)
 * @return {Array} M·∫£ng c√°c c·ªï phi·∫øu v·ªõi th√¥ng tin: code, quantity, costPrice, totalCost
 */
function getStocksForDividend() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.STOCK);
    
    if (!sheet) {
      Logger.log('Sheet CH·ª®NG KHO√ÅN kh√¥ng t·ªìn t·∫°i');
      return [];
    }
    
    const emptyRow = findEmptyRow(sheet, 2);
    const dataRows = emptyRow - 2;
    
    if (dataRows <= 0) {
      return [];
    }
    
    // ‚úÖ v3.5: ƒê·ªçc ƒë√∫ng theo c·∫•u tr√∫c 16 c·ªôt
    // C·ªôt: STT(A), Ng√†y(B), Lo·∫°i GD(C), M√£ CK(D), S·ªë l∆∞·ª£ng(E), Gi√° g·ªëc(F), Ph√≠(G), T·ªïng v·ªën(H), C·ªï t·ª©c TM(I)
    const data = sheet.getRange(2, 3, dataRows, 7).getValues(); // T·ª´ c·ªôt C ƒë·∫øn I
    
    const stockMap = new Map();
    
    for (let i = 0; i < data.length; i++) {
      const type = data[i][0];        // C·ªôt C: Lo·∫°i GD
      const symbol = data[i][1];      // C·ªôt D: M√£ CK
      const quantity = parseFloat(data[i][2]) || 0;  // C·ªôt E: S·ªë l∆∞·ª£ng
      const price = parseFloat(data[i][3]) || 0;     // C·ªôt F: Gi√° g·ªëc
      const fee = parseFloat(data[i][4]) || 0;       // C·ªôt G: Ph√≠
      const totalCost = parseFloat(data[i][5]) || 0; // C·ªôt H: T·ªïng v·ªën
      const dividendReceived = parseFloat(data[i][6]) || 0; // C·ªôt I: C·ªï t·ª©c TM ƒë√£ nh·∫≠n
      
      if (!symbol) continue;
      
      if (!stockMap.has(symbol)) {
        stockMap.set(symbol, {
          code: symbol,
          quantity: 0,
          totalCost: 0,
          totalDividend: 0
        });
      }
      
      const stock = stockMap.get(symbol);
      
      if (type === 'Mua') {
        stock.quantity += quantity;
        stock.totalCost += totalCost;
        stock.totalDividend += dividendReceived;
      } else if (type === 'B√°n') {
        stock.quantity -= quantity;
        if (stock.quantity > 0) {
          const soldRatio = quantity / (stock.quantity + quantity);
          stock.totalCost *= (1 - soldRatio);
          stock.totalDividend *= (1 - soldRatio);
        } else {
          stock.totalCost = 0;
          stock.totalDividend = 0;
        }
      } else if (type === 'Th∆∞·ªüng') {
        // Th∆∞·ªüng c·ªï phi·∫øu: tƒÉng s·ªë l∆∞·ª£ng, gi√° v·ªën kh√¥ng ƒë·ªïi
        stock.quantity += quantity;
      }
    }
    
    const stocks = [];
    stockMap.forEach((stock) => {
      if (stock.quantity > 0) {
        // Gi√° v·ªën ƒëi·ªÅu ch·ªânh = (T·ªïng v·ªën - C·ªï t·ª©c ƒë√£ nh·∫≠n) / S·ªë l∆∞·ª£ng
        const adjustedCost = stock.totalCost - stock.totalDividend;
        stock.costPrice = adjustedCost / stock.quantity;
        stocks.push(stock);
      }
    });
    
    Logger.log('Danh s√°ch c·ªï phi·∫øu: ' + JSON.stringify(stocks));
    return stocks;
    
  } catch (error) {
    Logger.log('L·ªói getStocksForDividend: ' + error.message);
    return [];
  }
}

/**
 * ============================================================
 * X·ª¨ L√ù C·ªî T·ª®C (TI·ªÄN M·∫∂T & TH∆Ø·ªûNG C·ªî PHI·∫æU) - v3.5.1 NEW LOGIC
 * ============================================================
 * 
 * LOGIC M·ªöI v3.5.1:
 * 
 * 1. C·ªî T·ª®C TI·ªÄN M·∫∂T:
 *    - T·∫°o kho·∫£n THU
 *    - C·∫¨P NH·∫¨T C·ªòT I (C·ªï t·ª©c TM): C·ªông d·ªìn c·ªï t·ª©c v√†o c·ªôt I
 *    - GHI L·ªäCH S·ª¨ V√ÄO C·ªòT P (Ghi ch√∫): Th√™m note v·ªÅ c·ªï t·ª©c
 *    - C·ªôt K (Gi√° ƒëi·ªÅu ch·ªânh) t·ª± ƒë·ªông t√≠nh = (H-I)/E
 * 
 * 2. TH∆Ø·ªûNG C·ªî PHI·∫æU:
 *    - Th√™m d√≤ng m·ªõi v·ªõi Lo·∫°i GD = "Th∆∞·ªüng"
 *    - Gi√° = 0, Ph√≠ = 0, T·ªïng = 0
 *    - C·ªôt J (C·ªï t·ª©c CP) = s·ªë CP th∆∞·ªüng
 * 
 * @param {Object} data - D·ªØ li·ªáu c·ªï t·ª©c
 * @return {Object} {success, message}
 */
function processDividend(data) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const stockSheet = ss.getSheetByName(APP_CONFIG.SHEETS.STOCK);
    
    if (!stockSheet) {
      return {
        success: false,
        message: '‚ùå Sheet CH·ª®NG KHO√ÅN ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const type = data.type; // 'cash' ho·∫∑c 'stock'
    const stockCode = data.stockCode;
    const date = data.date;
    const notes = data.notes || '';
    
    if (type === 'cash') {
      // ============================================================
      // X·ª¨ L√ù C·ªî T·ª®C TI·ªÄN M·∫∂T - v3.5.1 NEW LOGIC
      // ============================================================
      const cashAmount = parseFloat(data.cashAmount);
      const totalDividend = parseFloat(data.totalDividend);
      
      // B∆Ø·ªöC 1: T·∫°o giao d·ªãch THU
      const incomeResult = addIncome({
        date: date,
        amount: totalDividend,
        source: 'ƒê·∫ßu t∆∞',
        note: `C·ªï t·ª©c ${stockCode}: ${formatCurrency(cashAmount)}/CP. ${notes}`
      });
      
      if (!incomeResult.success) {
        return incomeResult;
      }
      
      // B∆Ø·ªöC 2: C·∫¨P NH·∫¨T C·ªòT I (C·ªï t·ª©c TM) V√Ä C·ªòT P (Ghi ch√∫)
      const emptyRow = findEmptyRow(stockSheet, 2);
      const dataRows = emptyRow - 2;
      
      if (dataRows > 0) {
        // L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ sheet (16 c·ªôt)
        const stockData = stockSheet.getRange(2, 1, dataRows, 16).getValues();
        
        // T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒëang n·∫Øm gi·ªØ v√† l∆∞u c√°c row MUA
        let totalQuantity = 0;
        const buyRows = [];
        
        for (let i = 0; i < stockData.length; i++) {
          const rowType = stockData[i][2];   // C·ªôt C: Lo·∫°i GD
          const rowSymbol = stockData[i][3]; // C·ªôt D: M√£ CK
          const rowQty = parseFloat(stockData[i][4]) || 0; // C·ªôt E: S·ªë l∆∞·ª£ng
          
          if (rowSymbol === stockCode) {
            if (rowType === 'Mua') {
              totalQuantity += rowQty;
              buyRows.push({
                row: i + 2, // +2 v√¨ header ·ªü row 1 v√† array index t·ª´ 0
                quantity: rowQty,
                currentDividend: parseFloat(stockData[i][8]) || 0, // C·ªôt I: C·ªï t·ª©c TM hi·ªán t·∫°i
                currentNote: stockData[i][15] || '' // C·ªôt P: Ghi ch√∫ hi·ªán t·∫°i
              });
            } else if (rowType === 'B√°n') {
              totalQuantity -= rowQty;
            } else if (rowType === 'Th∆∞·ªüng') {
              totalQuantity += rowQty;
            }
          }
        }
        
        // Ki·ªÉm tra c√≥ c·ªï phi·∫øu hay kh√¥ng
        if (totalQuantity <= 0 || buyRows.length === 0) {
          return {
            success: false,
            message: '‚ùå Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu MUA ƒë·ªÉ ghi nh·∫≠n c·ªï t·ª©c!'
          };
        }
        
        // C·∫¨P NH·∫¨T: C·ªông c·ªï t·ª©c v√†o c·ªôt I v√† th√™m note v√†o c·ªôt P
        const dateStr = new Date(date).toLocaleDateString('vi-VN');
        
        for (let i = 0; i < buyRows.length; i++) {
          const buyRow = buyRows[i];
          
          // T√≠nh ph·∫ßn c·ªï t·ª©c t∆∞∆°ng ·ª©ng v·ªõi l√¥ n√†y
          const dividendForThisLot = (buyRow.quantity / totalQuantity) * totalDividend;
          
          // C·ªôt I: C·ªï t·ª©c TM m·ªõi = C·ªï t·ª©c c≈© + C·ªï t·ª©c l·∫ßn n√†y
          const newDividend = buyRow.currentDividend + dividendForThisLot;
          stockSheet.getRange(buyRow.row, 9).setValue(newDividend);
          
          // C·ªôt P: Th√™m l·ªãch s·ª≠ c·ªï t·ª©c
          const dividendNote = `CT ${dateStr}: +${formatCurrency(dividendForThisLot)}`;
          const newNote = buyRow.currentNote 
            ? `${buyRow.currentNote} | ${dividendNote}`
            : dividendNote;
          stockSheet.getRange(buyRow.row, 16).setValue(newNote);
          
          Logger.log(`‚úÖ Row ${buyRow.row}: ${stockCode} - C·ªông c·ªï t·ª©c ${formatCurrency(dividendForThisLot)} v√†o c·ªôt I`);
        }
        
        Logger.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·ªï t·ª©c ${formatCurrency(totalDividend)} cho ${stockCode} v√†o c·ªôt I`);
      }
      
      return {
        success: true,
        message: `‚úÖ ƒê√£ ghi nh·∫≠n c·ªï t·ª©c ti·ªÅn m·∫∑t ${formatCurrency(totalDividend)} cho ${stockCode}!\n` +
                 `üìä C·ªôt "C·ªï t·ª©c TM" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.\n` +
                 `üí° C·ªôt "Gi√° ƒêC" t·ª± ƒë·ªông t√≠nh = (T·ªïng v·ªën - C·ªï t·ª©c TM) / S·ªë l∆∞·ª£ng`
      };
      
    } else if (type === 'stock') {
      // ============================================================
      // X·ª¨ L√ù TH∆Ø·ªûNG C·ªî PHI·∫æU - v3.5.1
      // ============================================================
      const stockRatio = parseFloat(data.stockRatio);
      const bonusShares = parseInt(data.bonusShares);
      const currentQuantity = parseFloat(data.currentQuantity);
      const newQuantity = currentQuantity + bonusShares;
      
      // Th√™m d√≤ng m·ªõi: Lo·∫°i GD = "Th∆∞·ªüng"
      const emptyRow = findEmptyRow(stockSheet, 2);
      const stt = getNextSTT(stockSheet, 2);
      
      const noteText = `Th∆∞·ªüng CP ${stockRatio}% (${bonusShares} CP). ${notes}`;
      
      // ‚úÖ v3.5.1: Ghi ƒë√∫ng 10 c·ªôt + ghi ch√∫, sau ƒë√≥ set c√¥ng th·ª©c
      const rowData = [
        stt,            // A: STT
        new Date(date), // B: Ng√†y
        'Th∆∞·ªüng',       // C: Lo·∫°i GD
        stockCode,      // D: M√£ CK
        bonusShares,    // E: S·ªë l∆∞·ª£ng
        0,              // F: Gi√° = 0
        0,              // G: Ph√≠ = 0
        0,              // H: T·ªïng = 0
        0,              // I: C·ªï t·ª©c TM = 0
        bonusShares     // J: C·ªï t·ª©c CP = s·ªë CP th∆∞·ªüng
      ];
      
      // Ghi d·ªØ li·ªáu v√†o c·ªôt A-J
      stockSheet.getRange(emptyRow, 1, 1, 10).setValues([rowData]);
      
      // Ghi ghi ch√∫ v√†o c·ªôt P
      stockSheet.getRange(emptyRow, 16).setValue(noteText);
      
      // ‚úÖ SET C√îNG TH·ª®C cho c·ªôt K-O
      stockSheet.getRange(emptyRow, 11).setFormula(`=IF(E${emptyRow}>0, (H${emptyRow}-I${emptyRow})/E${emptyRow}, 0)`);
      stockSheet.getRange(emptyRow, 13).setFormula(`=IF(AND(E${emptyRow}>0, L${emptyRow}>0), E${emptyRow}*L${emptyRow}, 0)`);
      stockSheet.getRange(emptyRow, 14).setFormula(`=IF(M${emptyRow}>0, M${emptyRow}-(H${emptyRow}-I${emptyRow}), 0)`);
      stockSheet.getRange(emptyRow, 15).setFormula(`=IF(AND(N${emptyRow}<>0, (H${emptyRow}-I${emptyRow})>0), N${emptyRow}/(H${emptyRow}-I${emptyRow}), 0)`);
      
      formatNewRow(stockSheet, emptyRow, {
        2: 'dd/mm/yyyy',
        6: '#,##0" VNƒê"',
        7: '#,##0" VNƒê"',
        8: '#,##0" VNƒê"',
        9: '#,##0" VNƒê"',
        11: '#,##0" VNƒê"',
        12: '#,##0" VNƒê"',
        13: '#,##0" VNƒê"',
        14: '#,##0" VNƒê"',
        15: '0.00%'
      });
      
      Logger.log(`‚úÖ ƒê√£ ghi nh·∫≠n th∆∞·ªüng ${bonusShares} CP ${stockCode}`);
      
      return {
        success: true,
        message: `‚úÖ ƒê√£ ghi nh·∫≠n th∆∞·ªüng ${bonusShares} c·ªï phi·∫øu ${stockCode}!\n` +
                 `üìä S·ªë l∆∞·ª£ng m·ªõi: ${newQuantity} CP\n` +
                 `üí° Gi√° v·ªën/CP t·ª± ƒë·ªông gi·∫£m (v√¨ t·ªïng v·ªën kh√¥ng ƒë·ªïi, s·ªë l∆∞·ª£ng tƒÉng)`
      };
    }
    
    return {
      success: false,
      message: '‚ùå Lo·∫°i c·ªï t·ª©c kh√¥ng h·ª£p l·ªá!'
    };
    
  } catch (error) {
    Logger.log('Error in processDividend: ' + error.message);
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}