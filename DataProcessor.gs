/**
 * ===============================================
 * DATAPROCESSORS.GS v3.3 - COMPLETE FIX
 * ===============================================
 */

// ==================== H√ÄM H·ªñ TR·ª¢ - DEBT LIST ====================

/**
 * L·∫•y danh s√°ch c√°c kho·∫£n n·ª£ ƒëang c√≥
 * @return {Array} M·∫£ng t√™n c√°c kho·∫£n n·ª£
 */
function getDebtList() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_MANAGEMENT);
    
    if (!sheet) {
      Logger.log('Sheet QU·∫¢N L√ù N·ª¢ kh√¥ng t·ªìn t·∫°i');
      return [];
    }
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow() ƒë·ªÉ x√°c ƒë·ªãnh s·ªë d√≤ng c√≥ d·ªØ li·ªáu th·ª±c
    const emptyRow = findEmptyRow(sheet, 2);
    const dataRows = emptyRow - 2; // Tr·ª´ header v√† b·∫Øt ƒë·∫ßu t·ª´ 0
    
    if (dataRows <= 0) {
      return [];
    }
    
    // L·∫•y d·ªØ li·ªáu t·ª´ c·ªôt B (T√™n kho·∫£n n·ª£)
    const data = sheet.getRange(2, 2, dataRows, 1).getValues();
    
    // L·ªçc c√°c d√≤ng c√≥ t√™n kho·∫£n n·ª£
    const debtList = data
      .map(row => row[0])
      .filter(name => name && name.toString().trim() !== '');
    
    Logger.log('Danh s√°ch n·ª£: ' + debtList.join(', '));
    return debtList;
    
  } catch (error) {
    Logger.log('L·ªói getDebtList: ' + error.message);
    return [];
  }
}

// ==================== THU NH·∫¨P ====================

/**
 * Th√™m kho·∫£n thu nh·∫≠p
 * @param {Object} data - {date, amount, source, note}
 * @return {Object} {success, message}
 */
function addIncome(data) {
  try {
    // Validation
    if (!data.date || !data.amount || !data.source) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.INCOME);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet THU ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o! Vui l√≤ng kh·ªüi t·∫°o sheet tr∆∞·ªõc.'
      };
    }
    
    // Parse d·ªØ li·ªáu
    const date = new Date(data.date);
    const amount = parseFloat(data.amount);
    const source = data.source;
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow() v√† getNextSTT()
    const emptyRow = findEmptyRow(sheet, 2); // C·ªôt B = Ng√†y
    const stt = getNextSTT(sheet, 2);
    
    // Th√™m d·ªØ li·ªáu
    const rowData = [stt, date, amount, source, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    // Format d√≤ng m·ªõi
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      3: '#,##0" VNƒê"'
    });
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ th√™m thu nh·∫≠p ${formatCurrency(amount)} t·ª´ ${source}!`
    };
    
  } catch (error) {
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== CHI TI√äU ====================

/**
 * Th√™m kho·∫£n chi ti√™u
 * @param {Object} data - {date, amount, category, detail, note}
 * @return {Object} {success, message}
 */
function addExpense(data) {
  try {
    // Validation
    if (!data.date || !data.amount || !data.category) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.EXPENSE);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet CHI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o! Vui l√≤ng kh·ªüi t·∫°o sheet tr∆∞·ªõc.'
      };
    }
    
    // Parse d·ªØ li·ªáu
    const date = new Date(data.date);
    const amount = parseFloat(data.amount);
    const category = data.category;
    const detail = data.detail || '';
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow() v√† getNextSTT()
    const emptyRow = findEmptyRow(sheet, 2); // C·ªôt B = Ng√†y
    const stt = getNextSTT(sheet, 2);
    
    // Th√™m d·ªØ li·ªáu
    const rowData = [stt, date, amount, category, detail, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    // Format d√≤ng m·ªõi
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      3: '#,##0" VNƒê"'
    });
    
    // C·∫≠p nh·∫≠t Budget
    try {
      BudgetManager.updateExpenseBudget(category);
    } catch (e) {
      Logger.log('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t budget: ' + e.message);
    }
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ th√™m chi ti√™u ${formatCurrency(amount)} cho ${category}!`
    };
    
  } catch (error) {
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== TR·∫¢ N·ª¢ - FIXED VERSION ====================

/**
 * Th√™m kho·∫£n tr·∫£ n·ª£ V√Ä t·ª± ƒë·ªông c·∫≠p nh·∫≠t QU·∫¢N L√ù N·ª¢
 * ‚úÖ FIX: Logic tr·∫°ng th√°i Ch∆∞a tr·∫£ ‚Üí ƒêang tr·∫£ ‚Üí ƒê√£ tr·∫£ h·∫øt
 * @param {Object} data - {date, debtName, principal, interest, note}
 * @return {Object} {success, message}
 */
function addDebtPayment(data) {
  try {
    // Validation
    if (!data.date || !data.debtName || (!data.principal && !data.interest)) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Ki·ªÉm tra sheets
    const paymentSheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_PAYMENT);
    const managementSheet = ss.getSheetByName(APP_CONFIG.SHEETS.DEBT_MANAGEMENT);
    
    if (!paymentSheet) {
      return {
        success: false,
        message: '‚ùå Sheet TR·∫¢ N·ª¢ ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    if (!managementSheet) {
      return {
        success: false,
        message: '‚ùå Sheet QU·∫¢N L√ù N·ª¢ ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    // Parse d·ªØ li·ªáu
    const date = new Date(data.date);
    const debtName = data.debtName;
    const principal = parseFloat(data.principal) || 0;
    const interest = parseFloat(data.interest) || 0;
    const total = principal + interest;
    const note = data.note || '';
    
    // ‚úÖ FIX: Th√™m v√†o Sheet TR·∫¢ N·ª¢
    const emptyRow = findEmptyRow(paymentSheet, 2); // C·ªôt B = Ng√†y
    const stt = getNextSTT(paymentSheet, 2);
    
    const rowData = [stt, date, debtName, principal, interest, total, note];
    paymentSheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    // Format d√≤ng m·ªõi
    formatNewRow(paymentSheet, emptyRow, {
      2: 'dd/mm/yyyy',
      4: '#,##0" VNƒê"',
      5: '#,##0" VNƒê"',
      6: '#,##0" VNƒê"'
    });
    
    // C·∫≠p nh·∫≠t Sheet QU·∫¢N L√ù N·ª¢
    const debtRow = findDebtRow(managementSheet, debtName);
    
    if (debtRow === -1) {
      return {
        success: false,
        message: `‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n n·ª£ "${debtName}" trong QU·∫¢N L√ù N·ª¢!`
      };
    }
    
    // L·∫•y th√¥ng tin n·ª£ hi·ªán t·∫°i
    const debtData = managementSheet.getRange(debtRow, 1, 1, 12).getValues()[0];
    const originalDebt = parseFloat(debtData[2]) || 0;
    const paidPrincipal = parseFloat(debtData[7]) || 0;
    const paidInterest = parseFloat(debtData[8]) || 0;
    
    // T√≠nh to√°n gi√° tr·ªã m·ªõi
    const newPaidPrincipal = paidPrincipal + principal;
    const newPaidInterest = paidInterest + interest;
    const remaining = originalDebt - newPaidPrincipal;
    
    // ‚úÖ FIX: X√°c ƒë·ªãnh tr·∫°ng th√°i theo logic ƒë√∫ng
    let status = 'ƒêang tr·∫£';
    
    if (remaining <= 0) {
      status = 'ƒê√£ tr·∫£ h·∫øt';
    } else if (newPaidPrincipal === 0 && newPaidInterest === 0) {
      // N·∫øu ch∆∞a tr·∫£ g√¨ c·∫£ (c·∫£ g·ªëc v√† l√£i ƒë·ªÅu = 0)
      status = 'Ch∆∞a tr·∫£';
    }
    
    // C·∫≠p nh·∫≠t c√°c c·ªôt H, I, K (c·ªôt J c√≥ c√¥ng th·ª©c n√™n t·ª± t√≠nh)
    managementSheet.getRange(debtRow, 8).setValue(newPaidPrincipal);  // H: ƒê√£ tr·∫£ g·ªëc
    managementSheet.getRange(debtRow, 9).setValue(newPaidInterest);   // I: ƒê√£ tr·∫£ l√£i
    // C·ªôt J (C√≤n n·ª£) c√≥ c√¥ng th·ª©c =C-H n√™n kh√¥ng c·∫ßn set
    managementSheet.getRange(debtRow, 11).setValue(status);           // K: Tr·∫°ng th√°i
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n tr·∫£ n·ª£ cho ${debtName}!\n` +
               `üí∞ G·ªëc: ${formatCurrency(principal)}\n` +
               `üí≥ L√£i: ${formatCurrency(interest)}\n` +
               `üìä C√≤n n·ª£: ${formatCurrency(remaining)}\n` +
               `üìå Tr·∫°ng th√°i: ${status}`
    };
    
  } catch (error) {
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

/**
 * T√¨m d√≤ng ch·ª©a kho·∫£n n·ª£ theo t√™n
 * @param {Sheet} sheet - Sheet QU·∫¢N L√ù N·ª¢
 * @param {string} debtName - T√™n kho·∫£n n·ª£
 * @return {number} Row number ho·∫∑c -1 n·∫øu kh√¥ng t√¨m th·∫•y
 */
function findDebtRow(sheet, debtName) {
  const emptyRow = findEmptyRow(sheet, 2);
  const dataRows = emptyRow - 2;
  
  if (dataRows <= 0) {
    return -1;
  }
  
  const data = sheet.getRange(2, 2, dataRows, 1).getValues();
  
  for (let i = 0; i < data.length; i++) {
    if (data[i][0] === debtName) {
      return i + 2; // +2 v√¨ b·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2
    }
  }
  
  return -1;
}

// ==================== CH·ª®NG KHO√ÅN ====================

/**
 * Th√™m giao d·ªãch ch·ª©ng kho√°n
 */
function addStock(data) {
  try {
    if (!data.date || !data.type || !data.symbol || !data.quantity || !data.price) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.STOCK);
    
    if (!sheet) {
      return {
        success: false,
        message: '‚ùå Sheet CH·ª®NG KHO√ÅN ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!'
      };
    }
    
    const date = new Date(data.date);
    const type = data.type;
    const symbol = data.symbol.toUpperCase();
    const quantity = parseFloat(data.quantity);
    const price = parseFloat(data.price);
    const fee = parseFloat(data.fee) || 0;
    const total = (quantity * price) + fee;
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow()
    const emptyRow = findEmptyRow(sheet, 2); // C·ªôt B = Ng√†y
    const stt = getNextSTT(sheet, 2);
    
    const rowData = [stt, date, type, symbol, quantity, price, fee, total, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    // Format
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      6: '#,##0" VNƒê"',
      7: '#,##0" VNƒê"',
      8: '#,##0" VNƒê"'
    });
    
    // N·∫øu mua th√¨ tr·ª´ Budget
    if (type === 'Mua') {
      try {
        if (typeof BudgetManager !== 'undefined') {
          BudgetManager.updateInvestmentBudget('Ch·ª©ng kho√°n', total);
        }
      } catch (e) {
        Logger.log('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t budget: ' + e.message);
      }
    }
    
    // N·∫øu b√°n th√¨ th√™m v√†o THU
    if (type === 'B√°n') {
      try {
        addIncome({
          date: data.date,
          amount: total,
          source: 'B√°n CK',
          note: `B√°n ${quantity} ${symbol} @ ${price}`
        });
      } catch (e) {
        Logger.log('Kh√¥ng th·ªÉ th√™m thu nh·∫≠p: ' + e.message);
      }
    }
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} ${symbol} v·ªõi gi√° ${formatCurrency(price)}!`
    };
    
  } catch (error) {
    return {
      success: false,
      message: `‚ùå L·ªói: ${error.message}`
    };
  }
}

// ==================== V√ÄNG ====================

/**
 * Th√™m giao d·ªãch v√†ng
 */
function addGold(data) {
  try {
    if (!data.date || !data.type || !data.goldType || !data.quantity || !data.price) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.GOLD);
    
    if (!sheet) {
      return { success: false, message: '‚ùå Sheet V√ÄNG ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!' };
    }
    
    const date = new Date(data.date);
    const type = data.type;
    const goldType = data.goldType;
    const quantity = parseFloat(data.quantity);
    const unit = data.unit || 'ch·ªâ';
    const price = parseFloat(data.price);
    const location = data.location || '';
    const total = quantity * price;
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow()
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const rowData = [stt, date, type, goldType, quantity, unit, price, total, location, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      7: '#,##0" VNƒê"',
      8: '#,##0" VNƒê"'
    });
    
    if (type === 'Mua') {
      try { 
        if (typeof BudgetManager !== 'undefined') {
          BudgetManager.updateInvestmentBudget('V√†ng', total);
        }
      } catch(e) {}
    }
    
    if (type === 'B√°n') {
      try {
        addIncome({
          date: data.date,
          amount: total,
          source: 'B√°n V√†ng',
          note: `B√°n ${quantity} ${unit} ${goldType}`
        });
      } catch(e) {}
    }
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} ${unit} ${goldType}!`
    };
    
  } catch (error) {
    return { success: false, message: `‚ùå L·ªói: ${error.message}` };
  }
}

// ==================== CRYPTO ====================

/**
 * Th√™m giao d·ªãch crypto
 */
function addCrypto(data) {
  try {
    if (!data.date || !data.type || !data.coin || !data.quantity || !data.priceUSD) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.CRYPTO);
    
    if (!sheet) {
      return { success: false, message: '‚ùå Sheet CRYPTO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!' };
    }
    
    const date = new Date(data.date);
    const type = data.type;
    const coin = data.coin.toUpperCase();
    const quantity = parseFloat(data.quantity);
    const priceUSD = parseFloat(data.priceUSD);
    const exchangeRate = parseFloat(data.exchangeRate) || 23000;
    const priceVND = priceUSD * exchangeRate;
    const totalVND = quantity * priceVND;
    const exchange = data.exchange || '';
    const wallet = data.wallet || '';
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow()
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const rowData = [stt, date, type, coin, quantity, priceUSD, exchangeRate, priceVND, totalVND, exchange, wallet, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      6: '#,##0.00" USD"',
      8: '#,##0" VNƒê"',
      9: '#,##0" VNƒê"'
    });
    
    if (type === 'Mua') {
      try { 
        if (typeof BudgetManager !== 'undefined') {
          BudgetManager.updateInvestmentBudget('Crypto', totalVND);
        }
      } catch(e) {}
    }
    
    if (type === 'B√°n') {
      try {
        addIncome({
          date: data.date,
          amount: totalVND,
          source: 'B√°n Crypto',
          note: `B√°n ${quantity} ${coin}`
        });
      } catch(e) {}
    }
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ${type} ${quantity} ${coin}!`
    };
    
  } catch (error) {
    return { success: false, message: `‚ùå L·ªói: ${error.message}` };
  }
}

// ==================== ƒê·∫¶U T∆Ø KH√ÅC ====================

/**
 * Th√™m kho·∫£n ƒë·∫ßu t∆∞ kh√°c
 */
function addOtherInvestment(data) {
  try {
    if (!data.date || !data.type || !data.amount) {
      return {
        success: false,
        message: '‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!'
      };
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(APP_CONFIG.SHEETS.OTHER_INVESTMENT);
    
    if (!sheet) {
      return { success: false, message: '‚ùå Sheet ƒê·∫¶U T∆Ø KH√ÅC ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!' };
    }
    
    const date = new Date(data.date);
    const type = data.type;
    const amount = parseFloat(data.amount);
    const roi = parseFloat(data.roi) || 0;
    const term = parseInt(data.term) || 0;
    const expectedReturn = amount * (1 + (roi / 100) * (term / 12));
    const note = data.note || '';
    
    // ‚úÖ FIX: S·ª≠ d·ª•ng findEmptyRow()
    const emptyRow = findEmptyRow(sheet, 2);
    const stt = getNextSTT(sheet, 2);
    
    const rowData = [stt, date, type, amount, roi, term, expectedReturn, note];
    sheet.getRange(emptyRow, 1, 1, rowData.length).setValues([rowData]);
    
    formatNewRow(sheet, emptyRow, {
      2: 'dd/mm/yyyy',
      4: '#,##0" VNƒê"',
      5: '0.00"%"',
      7: '#,##0" VNƒê"'
    });
    
    try {
      if (typeof BudgetManager !== 'undefined') {
        BudgetManager.updateInvestmentBudget('ƒê·∫ßu t∆∞ kh√°c', amount);
      }
    } catch(e) {}
    
    return {
      success: true,
      message: `‚úÖ ƒê√£ ghi nh·∫≠n ƒë·∫ßu t∆∞ ${type} v·ªõi s·ªë ti·ªÅn ${formatCurrency(amount)}!`
    };
    
  } catch (error) {
    return { success: false, message: `‚ùå L·ªói: ${error.message}` };
  }
}