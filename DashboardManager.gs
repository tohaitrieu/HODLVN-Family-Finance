/**
 * ===============================================
 * DASHBOARDMANAGER.GS v3.25
 * ===============================================
 * 
 * 
 * A1:C16 - B·∫£ng th·ªëng k√™ (Danh m·ª•c, S·ªë ti·ªÅn, T·ª∑ l·ªá)
 * E1:J16 - Bi·ªÉu ƒë·ªì c·ªôt
 * A19:J34 - B·∫£ng th·ªëng k√™ theo th√°ng
 */

const DashboardManager = {
  
  CONFIG: {
    TABLE1: {
      START_ROW: 1,
      TITLE_ROW: 1,
      DROPDOWN_ROW: 2,
      HEADER_ROW: 6,
      DATA_START: 7,
      DATA_ROWS: 10,
      CHART_POSITION: {
        ROW: 1,     // ‚≠ê Row 1 (E1)
        COL: 5,     // ‚≠ê Column E (c·ªôt 5)
        OFFSET_X: 0,
        OFFSET_Y: 0
      },
      CHART_SIZE: {
        WIDTH: 600,   // ‚≠ê Width ƒë·ªÉ fit t·ª´ E ƒë·∫øn J
        HEIGHT: 400   // ‚≠ê Height ƒë·ªÉ fit t·ª´ row 1-16
      },
      CHART_DATA: {
        START: 'A7',  // ‚≠ê B·∫Øt ƒë·∫ßu t·ª´ A7 (kh√¥ng l·∫•y header)
        END: 'B15'    // ‚≠ê K·∫øt th√∫c t·∫°i B15
      }
    },
    TABLE2: {
      START_ROW: 19,
      TITLE_ROW: 19,
      HEADER_ROW: 20,
      DATA_START: 21,
      DATA_ROWS: 12,
      SUMMARY_ROW: 33,
      AVG_ROW: 34
    },
    CHART_COLORS: {
      CASH_FLOW: '#64B5F6',
      INCOME: '#81C784',
      EXPENSE: '#4FC3F7',
      DEBT_PRINCIPAL: '#EF5350',
      DEBT_INTEREST: '#E57373',
      STOCK: '#FF9800',
      GOLD: '#FFB74D',
      CRYPTO: '#FFA726',
      OTHER: '#FFCC80'
    }
  },
  
  setupDashboard() {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      let sheet = ss.getSheetByName(APP_CONFIG.SHEETS.DASHBOARD);
      
      if (!sheet) {
        sheet = ss.insertSheet(APP_CONFIG.SHEETS.DASHBOARD);
      } else {
        sheet.clear();
        sheet.clearConditionalFormatRules();
        sheet.getRange('B2:B4').setDataValidation(null);
        sheet.getRange('B2:B4').setNumberFormat('@');
        
        // X√≥a t·∫•t c·∫£ c√°c chart c≈©
        const charts = sheet.getCharts();
        charts.forEach(chart => sheet.removeChart(chart));
      }
      
      this._setupTable1(sheet);
      this._setupTable2(sheet);
      this._formatSheet(sheet);
      
      // ‚≠ê‚≠ê CRITICAL: FLUSH() - Bu·ªôc t·∫•t c·∫£ c√¥ng th·ª©c t√≠nh to√°n xong
      SpreadsheetApp.flush();
      
      // ‚≠ê DELAY ƒë·ªÉ ƒë·∫£m b·∫£o c√¥ng th·ª©c INDIRECT() ph·ª©c t·∫°p t√≠nh to√°n xong
      Utilities.sleep(500);
      
      // ‚≠ê DEBUG: Log d·ªØ li·ªáu tr∆∞·ªõc khi v·∫Ω chart
      const chartData = sheet.getRange('A7:B15').getDisplayValues();
      Logger.log('üìä Chart Data Preview (A7:B15):');
      chartData.forEach((row, idx) => {
        Logger.log(`  Row ${idx + 7}: ${row[0]} = ${row[1]}`);
      });
      
      // ‚≠ê‚≠ê T·∫†O CHART - sau khi t·∫•t c·∫£ ƒë√£ setup xong
      this._createChart(sheet);
      this._setupTriggers();
      
      SpreadsheetApp.getUi().alert(
        'Kh·ªüi t·∫°o th√†nh c√¥ng!',
        '‚úÖ Dashboard ƒë√£ ƒë∆∞·ª£c t·∫°o k√®m bi·ªÉu ƒë·ªì.\n\n' +
        'üìä Bi·ªÉu ƒë·ªì: "B√°o c√°o d√≤ng ti·ªÅn Gia ƒë√¨nh"\n' +
        'üìç V·ªã tr√≠: E1:J16\n' +
        'üìà D·ªØ li·ªáu: A7:B15\n\n' +
        'üìù Gi√° tr·ªã m·∫∑c ƒë·ªãnh:\n' +
        '- NƒÉm: 2025\n' +
        '- Qu√Ω: T·∫•t c·∫£\n' +
        '- Th√°ng: T·∫•t c·∫£\n\n' +
        'üí° Dashboard s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi thay ƒë·ªïi dropdown!',
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
      return sheet;
      
    } catch (error) {
      Logger.log('‚ùå L·ªói setupDashboard: ' + error.message);
      Logger.log('Stack: ' + error.stack);
      throw new Error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o Dashboard: ' + error.message);
    }
  },
  
  _setupTriggers() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'onDashboardEdit') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    ScriptApp.newTrigger('onDashboardEdit')
      .forSpreadsheet(ss)
      .onEdit()
      .create();
    
    Logger.log('‚úÖ Trigger ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
  },
  
  _setupTable1(sheet) {
    const cfg = this.CONFIG.TABLE1;
    
    // Ti√™u ƒë·ªÅ ch√≠nh
    sheet.getRange('A1:C1').merge();
    sheet.getRange('A1')
      .setValue('üìä TH·ªêNG K√ä T√ÄI CH√çNH GIA ƒê√åNH')
      .setFontSize(14)
      .setFontWeight('bold')
      .setHorizontalAlignment('left')
      .setVerticalAlignment('middle')
      .setBackground(APP_CONFIG.COLORS.PRIMARY)
      .setFontColor('#FFFFFF');
    sheet.setRowHeight(1, 40);
    
    // Dropdown labels
    sheet.getRange('A2').setValue('NƒÉm').setFontWeight('bold');
    sheet.getRange('A3').setValue('Qu√Ω').setFontWeight('bold');
    sheet.getRange('A4').setValue('Th√°ng').setFontWeight('bold');
    
    const currentYear = new Date().getFullYear();
    
    // 1. Set number format tr∆∞·ªõc
    sheet.getRange('B2').setNumberFormat('@');
    sheet.getRange('B3').setNumberFormat('@');
    sheet.getRange('B4').setNumberFormat('@');
    
    // 2. T·∫°o data validation
    const yearList = ['T·∫•t c·∫£'];
    for (let y = currentYear - 5; y <= currentYear + 2; y++) {
      yearList.push(y.toString());
    }
    const yearRule = SpreadsheetApp.newDataValidation()
      .requireValueInList(yearList)
      .setAllowInvalid(false)
      .build();
    
    const quarterRule = SpreadsheetApp.newDataValidation()
      .requireValueInList(['T·∫•t c·∫£', 'Qu√Ω 1', 'Qu√Ω 2', 'Qu√Ω 3', 'Qu√Ω 4'])
      .setAllowInvalid(false)
      .build();
    
    const monthList = ['T·∫•t c·∫£'];
    for (let m = 1; m <= 12; m++) {
      monthList.push(`Th√°ng ${m}`);
    }
    const monthRule = SpreadsheetApp.newDataValidation()
      .requireValueInList(monthList)
      .setAllowInvalid(false)
      .build();
    
    // 3. Set validation
    sheet.getRange('B2').setDataValidation(yearRule);
    sheet.getRange('B3').setDataValidation(quarterRule);
    sheet.getRange('B4').setDataValidation(monthRule);
    
    // 4. ‚≠ê Set gi√° tr·ªã m·∫∑c ƒë·ªãnh SAU KHI ƒë√£ set validation
    sheet.getRange('B2').setValue('2025');
    sheet.getRange('B3').setValue('T·∫•t c·∫£');
    sheet.getRange('B4').setValue('T·∫•t c·∫£');
    
    // Header row
    const headers1 = ['Danh m·ª•c', 'S·ªë ti·ªÅn', 'T·ª∑ l·ªá'];
    sheet.getRange(cfg.HEADER_ROW, 1, 1, 3).setValues([headers1])
      .setFontWeight('bold')
      .setHorizontalAlignment('center')
      .setBackground(APP_CONFIG.COLORS.HEADER_BG)
      .setFontColor(APP_CONFIG.COLORS.HEADER_TEXT);
    
    // ‚≠ê Danh m·ª•c categories - 9 d√≤ng (A7:A15)
    const categories = [
      'Ti·ªÅn m·∫∑t', 'Thu', 'Chi', 'Tr·∫£ n·ª£', 'L√£i ƒë√£ tr·∫£',
      'Ch·ª©ng kho√°n', 'V√†ng', 'Crypto', 'ƒê·∫ßu t∆∞ kh√°c'
    ];
    
    for (let i = 0; i < categories.length; i++) {
      const row = cfg.DATA_START + i;
      sheet.getRange(row, 1).setValue(categories[i]).setFontWeight('bold');
    }
    
    // ‚≠ê D√≤ng T·ªîNG ri√™ng bi·ªát (A16)
    sheet.getRange(16, 1).setValue('T·ªïng').setFontWeight('bold');
    
    // T·∫°o formulas
    this._createTable1Formulas(sheet);
    
    // Format numbers
    sheet.getRange(7, 2, 10, 1).setNumberFormat('#,##0" VNƒê"');
    sheet.getRange(7, 3, 10, 1).setNumberFormat('0.00%');
    
    // Conditional formatting
    const rule1 = SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0)
      .setBackground('#D4EDDA')
      .setRanges([sheet.getRange(7, 3, 10, 1)])
      .build();
    
    const rule2 = SpreadsheetApp.newConditionalFormatRule()
      .whenNumberLessThan(0)
      .setBackground('#F8D7DA')
      .setRanges([sheet.getRange(7, 3, 10, 1)])
      .build();
    
    sheet.setConditionalFormatRules([rule1, rule2]);
    
    // Borders
    sheet.getRange(cfg.HEADER_ROW, 1, cfg.DATA_ROWS + 1, 3)
      .setBorder(true, true, true, true, true, true);
  },
  
  _createTable1Formulas(sheet) {
    // B7: Ti·ªÅn m·∫∑t = Thu - Chi - Tr·∫£ n·ª£ - L√£i - CK - V√†ng - Crypto - ƒêT kh√°c
    sheet.getRange(7, 2).setFormula(`=IFERROR(B8-B9-B10-B11-B12-B13-B14-B15, 0)`);
    
    // B8: Thu
    sheet.getRange(8, 2).setFormula(this._createDynamicSumFormula('THU', 'C'));
    
    // B9: Chi
    sheet.getRange(9, 2).setFormula(this._createDynamicSumFormula('CHI', 'C'));
    
    // B10: Tr·∫£ n·ª£ (g·ªëc)
    sheet.getRange(10, 2).setFormula(this._createDynamicSumFormula('TR·∫¢ N·ª¢', 'D'));
    
    // B11: L√£i ƒë√£ tr·∫£
    sheet.getRange(11, 2).setFormula(this._createDynamicSumFormula('TR·∫¢ N·ª¢', 'E'));
    
    // B12: Ch·ª©ng kho√°n
    sheet.getRange(12, 2).setFormula(this._createDynamicInvestmentFormula('CH·ª®NG KHO√ÅN', 'H'));
    
    // B13: V√†ng
    sheet.getRange(13, 2).setFormula(this._createDynamicInvestmentFormula('V√ÄNG', 'H'));
    
    // B14: Crypto
    sheet.getRange(14, 2).setFormula(this._createDynamicInvestmentFormula('CRYPTO', 'I'));
    
    // B15: ƒê·∫ßu t∆∞ kh√°c
    sheet.getRange(15, 2).setFormula(this._createDynamicSumFormula('ƒê·∫¶U T∆Ø KH√ÅC', 'D'));
    
    // B16: T·ªïng = Thu
    sheet.getRange(16, 2).setFormula(`=IFERROR(B8, 0)`);
    
    // C7:C16: T·ª∑ l·ªá % (so v·ªõi t·ªïng thu)
    for (let row = 7; row <= 16; row++) {
      sheet.getRange(row, 3).setFormula(`=IFERROR(IF($B16<>0, B${row}/$B16, 0), 0)`);
    }
  },
  
  _createDynamicSumFormula(sheetName, col) {
    return `=IFERROR(
      IF(OR($B$2="", $B$3="", $B$4=""), 0,
        IF($B$2="T·∫•t c·∫£",
          SUM(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}")),
          IF($B$3="T·∫•t c·∫£",
            SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                   INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),1,1), 
                   INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2)+1,1,1)),
            IF($B$4="T·∫•t c·∫£",
              SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),(VALUE(RIGHT($B$3,1))-1)*3+1,1), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2),(VALUE(RIGHT($B$3,1))-1)*3+4,1)),
              SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),VALUE(RIGHT($B$4,LEN($B$4)-6)),1), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2),VALUE(RIGHT($B$4,LEN($B$4)-6))+1,1))
            )
          )
        )
      ), 0)`;
  },
  
  _createDynamicInvestmentFormula(sheetName, col) {
    return `=IFERROR(
      IF(OR($B$2="", $B$3="", $B$4=""), 0,
        IF($B$2="T·∫•t c·∫£",
          SUMIF(INDIRECT("'"&"${sheetName}"&"'!C:C"), "Mua", INDIRECT("'"&"${sheetName}"&"'!${col}:${col}")),
          IF($B$3="T·∫•t c·∫£",
            SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                   INDIRECT("'"&"${sheetName}"&"'!C:C"), "Mua",
                   INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),1,1), 
                   INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2)+1,1,1)),
            IF($B$4="T·∫•t c·∫£",
              SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                     INDIRECT("'"&"${sheetName}"&"'!C:C"), "Mua",
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),(VALUE(RIGHT($B$3,1))-1)*3+1,1), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2),(VALUE(RIGHT($B$3,1))-1)*3+4,1)),
              SUMIFS(INDIRECT("'"&"${sheetName}"&"'!${col}:${col}"), 
                     INDIRECT("'"&"${sheetName}"&"'!C:C"), "Mua",
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), ">="&DATE(VALUE($B$2),VALUE(RIGHT($B$4,LEN($B$4)-6)),1), 
                     INDIRECT("'"&"${sheetName}"&"'!B:B"), "<"&DATE(VALUE($B$2),VALUE(RIGHT($B$4,LEN($B$4)-6))+1,1))
            )
          )
        )
      ), 0)`;
  },
  
  _setupTable2(sheet) {
    const cfg = this.CONFIG.TABLE2;
    const currentYear = new Date().getFullYear();
    
    // Title
    sheet.getRange(`A${cfg.TITLE_ROW}:J${cfg.TITLE_ROW}`).merge();
    sheet.getRange(cfg.TITLE_ROW, 1)
      .setValue(`üìà TH·ªêNG K√ä T√ÄI CH√çNH GIA ƒê√åNH NƒÇM ${currentYear}`)
      .setFontSize(12)
      .setFontWeight('bold')
      .setHorizontalAlignment('left')
      .setVerticalAlignment('middle')
      .setBackground(APP_CONFIG.COLORS.PRIMARY)
      .setFontColor('#FFFFFF');
    sheet.setRowHeight(cfg.TITLE_ROW, 35);
    
    // Headers
    const headers2 = [
      'K·ª≥', 'Thu', 'Chi', 'N·ª£ (G·ªëc)', 'L√£i', 
      'CK', 'V√†ng', 'Crypto', 'ƒêT kh√°c', 'D√≤ng ti·ªÅn'
    ];
    
    sheet.getRange(cfg.HEADER_ROW, 1, 1, 10).setValues([headers2])
      .setFontWeight('bold')
      .setHorizontalAlignment('center')
      .setBackground(APP_CONFIG.COLORS.HEADER_BG)
      .setFontColor(APP_CONFIG.COLORS.HEADER_TEXT);
    
    // Monthly data
    for (let month = 1; month <= 12; month++) {
      const row = cfg.DATA_START + month - 1;
      
      sheet.getRange(row, 1).setValue(`Th√°ng ${month}`);
      
      // Thu
      sheet.getRange(row, 2).setFormula(
        `=SUMIFS(THU!C:C, THU!B:B, ">="&DATE(${currentYear},${month},1), THU!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // Chi
      sheet.getRange(row, 3).setFormula(
        `=SUMIFS(CHI!C:C, CHI!B:B, ">="&DATE(${currentYear},${month},1), CHI!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // N·ª£ g·ªëc
      sheet.getRange(row, 4).setFormula(
        `=SUMIFS('TR·∫¢ N·ª¢'!D:D, 'TR·∫¢ N·ª¢'!B:B, ">="&DATE(${currentYear},${month},1), 'TR·∫¢ N·ª¢'!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // L√£i
      sheet.getRange(row, 5).setFormula(
        `=SUMIFS('TR·∫¢ N·ª¢'!E:E, 'TR·∫¢ N·ª¢'!B:B, ">="&DATE(${currentYear},${month},1), 'TR·∫¢ N·ª¢'!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // Ch·ª©ng kho√°n
      sheet.getRange(row, 6).setFormula(
        `=SUMIFS('CH·ª®NG KHO√ÅN'!H:H, 'CH·ª®NG KHO√ÅN'!C:C, "Mua", 'CH·ª®NG KHO√ÅN'!B:B, ">="&DATE(${currentYear},${month},1), 'CH·ª®NG KHO√ÅN'!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // V√†ng
      sheet.getRange(row, 7).setFormula(
        `=SUMIFS(V√ÄNG!H:H, V√ÄNG!C:C, "Mua", V√ÄNG!B:B, ">="&DATE(${currentYear},${month},1), V√ÄNG!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // Crypto
      sheet.getRange(row, 8).setFormula(
        `=SUMIFS(CRYPTO!I:I, CRYPTO!C:C, "Mua", CRYPTO!B:B, ">="&DATE(${currentYear},${month},1), CRYPTO!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // ƒê·∫ßu t∆∞ kh√°c
      sheet.getRange(row, 9).setFormula(
        `=SUMIFS('ƒê·∫¶U T∆Ø KH√ÅC'!D:D, 'ƒê·∫¶U T∆Ø KH√ÅC'!B:B, ">="&DATE(${currentYear},${month},1), 'ƒê·∫¶U T∆Ø KH√ÅC'!B:B, "<"&DATE(${currentYear},${month}+1,1))`
      );
      
      // D√≤ng ti·ªÅn
      const b = `B${row}`, c = `C${row}`, d = `D${row}`, e = `E${row}`;
      const f = `F${row}`, g = `G${row}`, h = `H${row}`, i = `I${row}`;
      sheet.getRange(row, 10).setFormula(
        `=IFERROR(${b}-(${c}+${d}+${e}+${f}+${g}+${h}+${i}), 0)`
      );
    }
    
    // T·ªïng
    sheet.getRange(cfg.SUMMARY_ROW, 1).setValue('T·ªïng').setFontWeight('bold');
    for (let col = 2; col <= 10; col++) {
      const startCell = this._getColumnLetter(col) + cfg.DATA_START;
      const endCell = this._getColumnLetter(col) + (cfg.DATA_START + 11);
      sheet.getRange(cfg.SUMMARY_ROW, col)
        .setFormula(`=SUM(${startCell}:${endCell})`)
        .setFontWeight('bold')
        .setBackground('#FFE0B2');
    }
    
    // Trung b√¨nh
    sheet.getRange(cfg.AVG_ROW, 1).setValue('Trung b√¨nh').setFontWeight('bold');
    for (let col = 2; col <= 10; col++) {
      const startCell = this._getColumnLetter(col) + cfg.DATA_START;
      const endCell = this._getColumnLetter(col) + (cfg.DATA_START + 11);
      sheet.getRange(cfg.AVG_ROW, col)
        .setFormula(`=AVERAGE(${startCell}:${endCell})`)
        .setFontWeight('bold')
        .setBackground('#FFF3E0');
    }
    
    // Format
    sheet.getRange(cfg.DATA_START, 2, 14, 9).setNumberFormat('#,##0" VNƒê"');
    sheet.getRange(cfg.HEADER_ROW, 1, 15, 10).setBorder(true, true, true, true, true, true);
  },
  
  /**
   * ‚≠ê‚≠ê T·∫†O CHART T·∫†I V·ªä TR√ç E1:J16
   * 
   * THAY ƒê·ªîI:
   * 1. D·ªØ li·ªáu: A7:B15 (9 d√≤ng, kh√¥ng c√≥ header, kh√¥ng c√≥ T·ªïng)
   * 2. V·ªã tr√≠: E1 (row 1, col 5)
   * 3. Ti√™u ƒë·ªÅ: "B√°o c√°o d√≤ng ti·ªÅn Gia ƒë√¨nh"
   * 4. Size: 600x400px ƒë·ªÉ fit E1:J16
   */
  _createChart(sheet) {
    const cfg = this.CONFIG.TABLE1;
    
    Logger.log('üîß Creating chart at E1:J16...');
    Logger.log(`üìä Data range: ${cfg.CHART_DATA.START}:${cfg.CHART_DATA.END}`);
    Logger.log(`üìç Position: Row ${cfg.CHART_POSITION.ROW}, Col ${cfg.CHART_POSITION.COL}`);
    Logger.log(`üìê Size: ${cfg.CHART_SIZE.WIDTH}x${cfg.CHART_SIZE.HEIGHT}`);
    
    // ‚≠ê T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi d·ªØ li·ªáu t·ª´ A7:B15
    const chart = sheet.newChart()
      .setChartType(Charts.ChartType.COLUMN)
      .addRange(sheet.getRange(cfg.CHART_DATA.START + ':' + cfg.CHART_DATA.END))
      .setPosition(
        cfg.CHART_POSITION.ROW, 
        cfg.CHART_POSITION.COL, 
        cfg.CHART_POSITION.OFFSET_X, 
        cfg.CHART_POSITION.OFFSET_Y
      )
      .setOption('title', 'B√°o c√°o d√≤ng ti·ªÅn Gia ƒë√¨nh')
      .setOption('width', cfg.CHART_SIZE.WIDTH)
      .setOption('height', cfg.CHART_SIZE.HEIGHT)
      .setOption('legend', { position: 'none' })
      .setOption('hAxis', { 
        title: 'Danh m·ª•c',
        slantedText: true,
        slantedTextAngle: 45
      })
      .setOption('vAxis', { 
        title: 'S·ªë ti·ªÅn (VNƒê)',
        format: '#,###'
      })
      .build();
    
    sheet.insertChart(chart);
    
    Logger.log('‚úÖ Chart created successfully at E1:J16');
    Logger.log(`   - Title: "B√°o c√°o d√≤ng ti·ªÅn Gia ƒë√¨nh"`);
    Logger.log(`   - Data: A7:B15 (9 categories)`);
    Logger.log(`   - Position: E1`);
  },
  
  _formatSheet(sheet) {
    // Set column widths
    sheet.setColumnWidth(1, 120);  // A: Danh m·ª•c
    sheet.setColumnWidth(2, 120);  // B: S·ªë ti·ªÅn
    sheet.setColumnWidth(3, 100);  // C: T·ª∑ l·ªá
    for (let col = 4; col <= 10; col++) {
      sheet.setColumnWidth(col, 100);
    }
    sheet.setFrozenRows(1);
  },
  
  refreshDashboard() {
    try {
      SpreadsheetApp.flush();
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(APP_CONFIG.SHEETS.DASHBOARD);
      
      if (sheet) {
        const b2 = sheet.getRange('B2').getValue();
        const b3 = sheet.getRange('B3').getValue();
        const b4 = sheet.getRange('B4').getValue();
        
        // Force recalculation
        sheet.getRange('B2').setValue(b2 + ' ');
        SpreadsheetApp.flush();
        sheet.getRange('B2').setValue(b2);
        
        sheet.getRange('B3').setValue(b3 + ' ');
        SpreadsheetApp.flush();
        sheet.getRange('B3').setValue(b3);
        
        sheet.getRange('B4').setValue(b4 + ' ');
        SpreadsheetApp.flush();
        sheet.getRange('B4').setValue(b4);
        
        SpreadsheetApp.flush();
        
        Logger.log('‚úÖ Dashboard refreshed');
      }
    } catch (error) {
      Logger.log('‚ùå L·ªói refreshDashboard: ' + error.message);
    }
  },
  
  _getColumnLetter(colNum) {
    let letter = '';
    while (colNum > 0) {
      const remainder = (colNum - 1) % 26;
      letter = String.fromCharCode(65 + remainder) + letter;
      colNum = Math.floor((colNum - 1) / 26);
    }
    return letter;
  }
};

/**
 * ‚≠ê TRIGGER: Auto-update dashboard khi thay ƒë·ªïi dropdown
 */
function onDashboardEdit(e) {
  try {
    if (!e) return;
    
    const range = e.range;
    const sheet = range.getSheet();
    const sheetName = sheet.getName();
    
    if (sheetName === APP_CONFIG.SHEETS.DASHBOARD) {
      const row = range.getRow();
      const col = range.getColumn();
      
      // Ch·ªâ trigger khi thay ƒë·ªïi dropdown B2, B3, B4
      if (col === 2 && (row === 2 || row === 3 || row === 4)) {
        Logger.log('‚≠ê Dropdown changed, force recalculate...');
        Utilities.sleep(100);
        SpreadsheetApp.flush();
        sheet.getDataRange().getValues();
        Logger.log('‚úÖ Dashboard auto-updated');
      }
    }
  } catch (error) {
    Logger.log('‚ùå L·ªói onDashboardEdit: ' + error.message);
  }
}

/**
 * ‚≠ê MENU FUNCTION: Manual refresh
 */
function refreshDashboard() {
  DashboardManager.refreshDashboard();
  SpreadsheetApp.getUi().alert(
    'Th√†nh c√¥ng', 
    '‚úÖ Dashboard ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}